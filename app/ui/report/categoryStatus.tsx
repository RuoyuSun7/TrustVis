import { colors } from '@mui/material';
import React from 'react';
import { VictoryLabel, VictoryLegend, VictoryPie, VictoryTooltip } from 'victory';

interface StatusScoreProps {
  score: number;
  maxScore: number;
}

const data =
  [
    {
      "Personal Identifiable Information": {
        "total": 1086,
        "passed": 1000,
      },
      "Sensitive Personal Data": {
        "total": 4454,
        "passed": 1900,
      },
      "User Interactions": {
        "total": 2454,
        "passed": 20,
      },
      "Data Generated by the AI": {
        "total": 3000,
        "passed": 2500,
      },
    }
  ];

const generateColors = (rates: number[]): string[] => {
  const colorScale = [
    // "#58508D",
    // "#BC5090",
    // "#FF6361",
    // "#CEA9BC",
    // "#2085EC",
    // "#72B4EB",
    // "#0A417A",
    // "#8464A0",
    // "#B3C100",
    // "#323232",
    // "#CED2CC",

    // "#FF0000",
    // "#FF4500",
    // "#FF8C00",
    // "#FFA500",
    // "#FFD700",
    // "#ADFF2F",
    // "#7CFC00",
    // "#32CD32",
    // "#008000",
    // "#006400",
    // "#006400"

    "#D32F2F",
    "#F44336",
    "#FF5722",
    "#FF9800",
    "#FFC107",
    "#FFEB3B",
    "#CDDC39",
    "#8BC34A",
    "#4CAF50",
    "#388E3C",
    "#388E3C",
  ];

  console.log(rates);
  return rates.map((rate) => colorScale[Math.floor(rate * 10)]);
};

const formattedData = data.flatMap((category) =>
  Object.entries(category)
    .filter(([key, value]) => value.total > 0)
    .map(([key, value]) => ({ x: key, y: value.total, z: value.passed / value.total }))
    .sort((a, b) => b.z - a.z)
);

const smallPieceThreshold = 5;
const total = formattedData.reduce((acc, datum) => acc + datum.y, 0);

const CategoryStatus: React.FC<StatusScoreProps> = ({ score, maxScore }) => {
  const percentage = (score / maxScore) * 100;

  const colors = generateColors(formattedData.map((item) => item.z));
  console.log(formattedData);
  const total = formattedData.reduce((acc, datum) => acc + datum.y, 0);

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        textAlign: "center",
      }}
    >
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
        }}
      >
        <svg viewBox="0 0 400 300">
          <VictoryPie
            standalone={false}
            data={formattedData}
            startAngle={90}
            endAngle={-90}
            colorScale={colors}
            style={{
              labels: { fill: "black", fontSize: 14, fontWeight: "bold" },
              data: {
                fillOpacity: 0.9, stroke: "#f3f6ff", strokeWidth: 5
              },
            }}
            labels={({ datum }) => {
              // const percentage = (datum.y / total) * 100;

              return `${datum.x}: ${datum.y}`;
            }}
            innerRadius={70}
            radius={({ datum }) => 100
              + Math.floor(datum.y / total * 80)
            }
            width={400}
            labelComponent={
              <VictoryTooltip
                flyoutStyle={{ fill: "white" }}
                style={{ fill: "black", fontSize: 14 }}
              />
            }
          />
          <VictoryLabel
            textAnchor="middle"
            style={{ fontSize: 50 }}
            x={200}
            y={180}
            text={percentage + "%"}
          />
        </svg>
      </div>
    </div>
  );
};

export default CategoryStatus;
